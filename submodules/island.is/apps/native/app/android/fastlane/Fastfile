default_platform(:android)

platform :android do
  desc "Upload a new AAB to the Google Play store"
  lane :play_store_upload do |options|
    track = options[:track] || 'internal'
    app = options[:app] || 'prod'
    aab = "app/build/outputs/bundle/" + (app == 'dev' ? 'devRelease/app-dev-release.aab' : 'prodRelease/app-prod-release.aab')
    upload_to_play_store(
      json_key: 'service-account.json',
      track: track,
      package_name: app == 'prod' ? 'is.island.app' : 'is.island.app.dev',
      aab: aab,
      skip_upload_apk: true,
      skip_upload_metadata: true,
      skip_upload_changelogs: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
  end

  lane :promote do |options|
    from = options[:from] || 'internal'
    to = options[:to] || 'alpha'
    apps = options[:apps] || 'dev,prod'
    apps.split(',').each do |app|
      upload_to_play_store(
        track: from,
        track_promote_to: to,
        json_key: 'service-account.json',
        package_name: app == 'prod' ? 'is.island.app' : 'is.island.app.dev',
        skip_upload_apk: true,
        skip_upload_aab: true,
        skip_upload_metadata: true,
        skip_upload_changelogs: true,
        skip_upload_images: true,
        skip_upload_screenshots: true
      )
    end
  end

  lane :increment_version do
    increment_version_name(gradle_file_path: "app/build.gradle")
  end

  desc "Submit a new Beta Build"
  lane :beta do |options|
    apps = options[:apps] || 'dev,prod'
    version_code = [
      latest_googleplay_version_code('dev'),
      latest_googleplay_version_code('prod'),
    ].max

    increment_version_code(
      gradle_file_path: "app/build.gradle",
      version_code: version_code + 1
    )
    # Build app variants
    gradle(
      task: apps.split(',').map { |app| "bundle#{app.capitalize}Release" }.join(' '),
      print_command_output: false
    )
    # Upload variants
    apps.split(',').each do |app|
      play_store_upload(
        track: 'internal',
        app: app
      )
    end
  end
end

def latest_googleplay_version_code (app)
  package_name = app == 'prod' ? 'is.island.app' : 'is.island.app.dev'
  def safe_fetch_version_codes(track, package_name)
    begin
      google_play_track_version_codes(
        track: track,
        package_name: package_name,
        json_key: 'service-account.json'
      )
    rescue StandardError
      [0]
    end
  end
  productionVersionCodes = app == 'prod' ? safe_fetch_version_codes('production', package_name) : [0]
  betaVersionCodes = safe_fetch_version_codes('beta', package_name)
  alphaVersionCodes = safe_fetch_version_codes('alpha', package_name)
  internalVersionCodes = safe_fetch_version_codes('internal', package_name)
  versionCodes = [productionVersionCodes, betaVersionCodes, alphaVersionCodes, internalVersionCodes].flatten
  return versionCodes.max
end
