default_platform(:ios)

platform :ios do
  desc "Push a new beta build to TestFlight"

  lane :increment_version do
    increment_version_number(xcodeproj: "IslandApp.xcodeproj")
  end

  lane :beta do |options|
    # increment build number if not already staged
    apps = options[:apps] || 'dev,prod'
    # Get latest build number for live app
    latest_testflight_build_number(live: true)
    # Store variables from context
    live_version = Gem::Version.new(lane_context[SharedValues::LATEST_TESTFLIGHT_VERSION])
    live_build_number = lane_context[SharedValues::LATEST_TESTFLIGHT_BUILD_NUMBER]
    # Get current version and build number from TestFlight
    current_version = Gem::Version.new(get_version_number(xcodeproj: "IslandApp.xcodeproj"))
    # Sanity checks for build version
    if (current_version <= live_version)
      puts "Current version #{current_version} is less than or equal to live version #{live_version}"
      if UI.confirm("Would you like to increment app version?")
        increment_version_number(
          xcodeproj: "IslandApp.xcodeproj",
          version_number: live_version.to_s
        )
        increment_version_number(
          xcodeproj: "IslandApp.xcodeproj",
          bump_type: "patch"
        )
      else
        if !UI.confirm("You cannot then publish this build. Do you still want to continue?")
          UI.user_error!("Upload aborted by user")
        end
      end
    else
      puts "Current version #{current_version} is greater than live version #{live_version}"
    end
    # Get latest build number for this version from TestFlight
    buildnumber = latest_testflight_build_number(
      app_identifier: "is.island.app.dev"
    )
    # Set app build number
    increment_build_number({
      build_number: buildnumber + 1
    })
    # Build and upload to TestFlight
    apps.split(',').each do |app|
      # Build
      build_app(
        workspace: "IslandApp.xcworkspace",
        scheme: app == 'dev' ? "Ísland.dev" : "Ísland.is",
        suppress_xcode_output: true
      )
      # Upload to TestFlight
      upload_to_testflight(
        skip_waiting_for_build_processing: true,
      )
    end
  end

  lane :promote do |options|
    to = options[:to] || 'alpha'
    apps = options[:apps] || 'dev,prod'
    message = options[:message] || "Bug fixes and UI improvements"
    tracks = {
      'internal' => 'App Store Connect Users',
      'alpha' => 'Alpha Testing',
      'beta' => 'Beta Testing',
    }
    apps.split(',').each do |app|
      app_identifier = app == 'prod' ? 'is.island.app' : 'is.island.app.dev'
      if !options[:app_version] || !options[:build_number]
        latest_testflight_build_number(
          version: options[:app_version],
          app_identifier: app_identifier
        )
      end
      app_version = options[:app_version] || lane_context[SharedValues::LATEST_TESTFLIGHT_VERSION]
      build_number = options[:build_number] || lane_context[SharedValues::LATEST_TESTFLIGHT_BUILD_NUMBER]
      upload_to_testflight(
        app_version: app_version,
        build_number: build_number.to_s,
        app_identifier: app_identifier,
        distribute_only: true,
        distribute_external: true,
        notify_external_testers: true,
        submit_beta_review: true,
        groups: [tracks[to]],
        localized_build_info: {
          "default": {
            whats_new: message,
          },
        }
      )
    end
  end
end
