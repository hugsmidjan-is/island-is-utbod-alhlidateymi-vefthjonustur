/* tslint:disable */
/* eslint-disable */
/**
 * Notification Service
 * Creates and stores notifications AND sends as mobile push notifications and emails
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface HnippTemplate
 */
export interface HnippTemplate {
  /**
   *
   * @type {string}
   * @memberof HnippTemplate
   */
  templateId: string
  /**
   *
   * @type {string}
   * @memberof HnippTemplate
   */
  notificationTitle: string
  /**
   *
   * @type {string}
   * @memberof HnippTemplate
   */
  notificationBody: string
  /**
   *
   * @type {string}
   * @memberof HnippTemplate
   */
  notificationDataCopy: string
  /**
   *
   * @type {string}
   * @memberof HnippTemplate
   */
  clickAction: string
  /**
   *
   * @type {string}
   * @memberof HnippTemplate
   */
  clickActionWeb: string
  /**
   *
   * @type {string}
   * @memberof HnippTemplate
   */
  clickActionUrl: string
  /**
   *
   * @type {string}
   * @memberof HnippTemplate
   */
  category: string
  /**
   *
   * @type {Array<string>}
   * @memberof HnippTemplate
   */
  args: Array<string>
}

export function HnippTemplateFromJSON(json: any): HnippTemplate {
  return HnippTemplateFromJSONTyped(json, false)
}

export function HnippTemplateFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): HnippTemplate {
  if (json === undefined || json === null) {
    return json
  }
  return {
    templateId: json['templateId'],
    notificationTitle: json['notificationTitle'],
    notificationBody: json['notificationBody'],
    notificationDataCopy: json['notificationDataCopy'],
    clickAction: json['clickAction'],
    clickActionWeb: json['clickActionWeb'],
    clickActionUrl: json['clickActionUrl'],
    category: json['category'],
    args: json['args'],
  }
}

export function HnippTemplateToJSON(value?: HnippTemplate | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    templateId: value.templateId,
    notificationTitle: value.notificationTitle,
    notificationBody: value.notificationBody,
    notificationDataCopy: value.notificationDataCopy,
    clickAction: value.clickAction,
    clickActionWeb: value.clickActionWeb,
    clickActionUrl: value.clickActionUrl,
    category: value.category,
    args: value.args,
  }
}
